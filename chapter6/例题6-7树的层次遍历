#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<sstream>
#include<iomanip>
#include<cstring>
#include<queue>
using namespace std;
vector<int> output;
bool assignment = false;
struct Node {
	bool have_value;
	int value;
	Node* left, * right;
	Node() : have_value(false), left(nullptr), right(nullptr) {}
};
Node* root=nullptr;
Node* newnode() { return new Node(); }
void remove_tree(Node* node) {
	if (node == nullptr) return;
	remove_tree(node->left);
	remove_tree(node->right);
	delete node;
}
void add_node(int i, string s) {
	int size = s.size();
	if (size == 0) {
		if (root->have_value) assignment = true;
		root->have_value = true;
		root->value = i;
		return;
	}
	Node* node = root;
	for (int j = 0; j <= size - 1; ++j) {
		if (s[j] == 'L') {
			if (node->left == nullptr) node->left = newnode();
			node = node->left;
		}
		else {
			if (node->right == nullptr) node->right = newnode();
			node = node->right;
		}
	}
	if (node->have_value) assignment = true;
	node->have_value = true;
	node->value = i;
	return;
}
bool bfs(vector<int>& output) {
	queue<Node*>q;
	output.clear();
	q.push(root);
	while (!q.empty()) {
		Node* node = q.front();
		q.pop();
		if (!node->have_value)return false;
		output.push_back(node->value);
		if (node->left != nullptr) q.push(node->left);
		if (node->right != nullptr) q.push(node->right);
	}
	return true;
}
void read_input() {
	char c;
	while (true) {
		c = getchar();
		if (c == EOF) break;
		remove_tree(root);
		root = newnode();
		assignment = false;
		while (true) {
			c = getchar();
			if (c == ')') break;
			int num = c - '0';
			while (true) {
				c = getchar();
				if (c == ',') break;
				num = num * 10 + (c - '0');
			}
			string s = "";
			while (true) {
				c = getchar();
				if (c == ')') {
					c = getchar();
					while (c != '(') c = getchar();
					break;
				}
				s.push_back(c);
			}
			add_node(num, s);
		}
		getchar();
		if ((!bfs(output)) || assignment) {
			cout << "not complete" << endl;
		}
		else {
			if (output.size() >= 2) for (int m = 0; m <= output.size() - 2; ++m) cout << output[m] << " ";
			if (output.size() == 1) {cout << output[0] << endl; continue; }
			cout << output[output.size() - 1] << endl;
		}
	}
}
int main() {
	read_input();
	return 0;
}
