#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<sstream>
#include<cstring>
#include<queue>
#include<map>
#include<set>
using namespace std;
map<string, int>map0;
int n;
int G[60][60];
int c[60];
int x[5];
string s;
bool dfs(int i) {
	c[i] = -1;
	for (int j = 0; j < 52; ++j) {
		if (G[i][j]) {
			if (c[j] < 0) return false;
			else if (c[j] == 0 && !dfs(j)) return false;
		}
	}
	c[i] = 1;
	return true;
}
bool toposort() {
	for (int i = 0; i < 52; ++i) {
		if (!c[i])
			if (!dfs(i)) return false;
	}
	return true;
}
int main() {
	map0["A+"] = 1; map0["A-"] = 27;
	map0["B+"] = 2; map0["B-"] = 28;
	map0["C+"] = 3; map0["C-"] = 29;
	map0["D+"] = 4; map0["D-"] = 30;
	map0["E+"] = 5; map0["E-"] = 31;
	map0["F+"] = 6; map0["F-"] = 32;
	map0["G+"] = 7; map0["G-"] = 33;
	map0["H+"] = 8; map0["H-"] = 34;
	map0["I+"] = 9; map0["I-"] = 35;
	map0["J+"] = 10; map0["J-"] = 36;
	map0["K+"] = 11; map0["K-"] = 37;
	map0["L+"] = 12; map0["L-"] = 38;
	map0["M+"] = 13; map0["M-"] = 39;
	map0["N+"] = 14; map0["N-"] = 40;
	map0["O+"] = 15; map0["O-"] = 41;
	map0["P+"] = 16; map0["P-"] = 42;
	map0["Q+"] = 17; map0["Q-"] = 43;
	map0["R+"] = 18; map0["R-"] = 44;
	map0["S+"] = 19; map0["S-"] = 45;
	map0["T+"] = 20; map0["T-"] = 46;
	map0["U+"] = 21; map0["U-"] = 47;
	map0["V+"] = 22; map0["V-"] = 48;
	map0["W+"] = 23; map0["W-"] = 49;
	map0["X+"] = 24; map0["X-"] = 50;
	map0["Y+"] = 25; map0["Y-"] = 51;
	map0["Z+"] = 26; map0["Z-"] = 52;
	map0["00"] = 100;
	while (cin >> n) {
		for (int i = 1; i <= n; ++i) {
			cin >> s;
			memset(x, 0, sizeof(x));
			for (int j = 0; j < 4; ++j) x[j + 1] = map0[s.substr(2 * j, 2)];
			for (int j = 1; j <= 4; ++j)
				for (int k = 1; k <= 4; ++k)
					if (k != j && x[j] != 100 && x[k] != 100)
						G[(x[j] + 26) % 52][x[k]] = 1;
		}
		memset(c, 0, sizeof(c));
		if (!toposort()) cout << "unbounded" << endl;
		else cout << "bounded" << endl;
		memset(G, 0, sizeof(G));
	}
	return 0;
}
