#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<sstream>
#include<cstring>
#include<queue>
#include<map>
#include<stack>
#include<set>
using namespace std;
string s;
vector<string> poker[60];
int find_last(int i) {
	if (i == 1) return 0;
	for (int j = i - 1; j >= 1; --j)
		if (!poker[j].empty())
			return j;
	return 0;
}
int find_last_three(int i) {
	if (i <= 3) return 0;
	int cnt = 3;
	for (int j = i - 1; j >= 1; --j) {
		if (!poker[j].empty()) {
			--cnt;
			if (cnt == 0) return j;
		}
	}
	return 0;
}
int find_last_two(int i) {
	if (i <= 2) return 0;
	int cnt = 2;
	for (int j = i - 1; j >= 1; --j) {
		if (!poker[j].empty()) {
			--cnt;
			if (cnt == 0) return j;
		}
	}
	return 0;
}
void move(int i) {
	if (poker[i].empty()) return;
	if (find_last_three(i) != 0) {
		int j = find_last_three(i);
		int u = find_last_two(i);
		int k = find_last(i);
		if (poker[j].back()[0] == poker[i].back()[0] || poker[j].back()[1] == poker[i].back()[1]) {
			poker[j].push_back(poker[i].back());
			poker[i].pop_back();
			move(j);
			move(u);
			move(k);
			move(i);
			return;
		}
	}
	if(find_last(i)!=0) {
		int j = find_last(i);
		if (poker[j].back()[0] == poker[i].back()[0] || poker[j].back()[1] == poker[i].back()[1]) {
			poker[j].push_back(poker[i].back());
			poker[i].pop_back();
			move(j);
			move(i);
		}
	}
	return;
}
int main() {
	while (true) {
		cin >> s;
		if (s == "#") break;
		poker[1].push_back(s);
		for (int i = 2; i <= 52; ++i) {
			cin >> s;
			poker[i].push_back(s);
			move(i);
		}
		int piles = 0;
		vector<int> result;
		for (int i = 1; i <= 52; ++i) {
			if (poker[i].size() != 0) {
				piles++;
				result.push_back(poker[i].size());
			}
		}
		if (piles >= 2)
			cout << piles << " piles remaining:";
		else
			cout << 1 << " pile remaining:";
		for (auto i : result) cout << " " << i;
		cout << endl;
		for (int i = 1; i <= 52; ++i) poker[i].clear();
	}
	return 0;
}
