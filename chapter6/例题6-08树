#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<iterator>
#include<iostream>
#include<algorithm>
#include<sstream>
#include<iomanip>
#include<cstring>
#include<queue>
using namespace std;
vector<int> inorder;
vector<int> postorder;
int level = 1;
struct Node {
	int value;
	Node* left;
	Node* right;
	Node(): value(0),left(nullptr),right(nullptr){}
};
Node* root = nullptr;
Node* new_node() { return new Node(); }
Node* add_node(int num) {
	Node* node = new_node();
	node->value = num;
	return node;
}
Node* construct(vector<int>::iterator p1, vector<int>::iterator q1,
	vector<int>::iterator p2, vector<int>::iterator q2) {
	int daddy = 0;
	if (q1 - p1 == 0||q2-p2==0) return nullptr;
	if (level != 1) for (auto iter = p2; iter != q2; ++iter) daddy = *iter;
	else daddy = root->value;
	++level;
	auto p = find(p1, q1, daddy);
	int length = p - p1;
	if (level == 2) {
		root->left = construct(p1, p, p2, p2 + length);
		root->right = construct(p + 1, q1, p2 + length, q2-1);
		return root;
	}
	else {
		Node* sub_root = add_node(daddy);
		sub_root->left = construct(p1, p, p2, p2 + length);
		sub_root->right = construct(p + 1, q1, p2 + length, q2-1);
		return sub_root;
	}
}
int best,best_sum;
void dfs(Node *node, int sum) {
	sum += node->value;
	if (node->left == nullptr && node->right == nullptr) {
		if (sum < best_sum || (sum == best_sum && node->value < best)) {
			best = node->value;
			best_sum = sum;
		}
	}
	if (node->left != nullptr) dfs(node->left, sum);
	if (node->right != nullptr) dfs(node->right, sum);
}
void remove_tree(Node* node) {
	if (node == nullptr) return;
	remove_tree(node->left);
	remove_tree(node->right);
	delete node;
}
void read_input() {
	string s;
	while (getline(cin, s)) {
		stringstream ss(s);
		int i;
		while (ss >> i) inorder.push_back(i);
		getline(cin, s);
		stringstream sss(s);
		while (sss >> i) postorder.push_back(i);
		root = new_node();
		root->value = i;
		level = 1;
		construct(inorder.begin(), inorder.end(), postorder.begin(), postorder.end());
		best = i;
		best_sum = 1000000000;
		dfs(root, 0);
		cout << best << endl;
		inorder.clear();
		postorder.clear();
		remove_tree(root);
	}
}
int main() {
	read_input();
	return 0;
}
